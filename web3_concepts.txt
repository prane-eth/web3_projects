
To test:
npx hardhat run scripts/run.js

Deploy using -
npx hardhat run scripts/deploy.js --network goerli

________________________________________________________________________

Notes from source https://buildspace.so/p/build-solidity-web3-app

A smart contract is code that lives on the blockchain you can read/write

The blockchain = Think of it as a cloud provider, kinda like AWS,
	but it's owned by no one.
	It's run by compute power from mining machines all over the world.
	Usually these people are called miners and we pay them to run our code!

So, when we want to perform an action on the Ethereum blockchain we
	call it a transaction.

Deploying a smart contract is also a transaction.

the blockchain has no owner. It's just a bunch of computers around
	the world run by miners that have a copy of the blockchain.

When we deploy our contract, we need to tell all those miners,
	"hey, this is a new smart contract, please add my smart contract
	to the blockchain and then tell everyone else about it as well".


Notes from
https://metaschool.so/course/how-does-ethereum-work-a-deepdive/lesson/cbf74f93-3534-4b4e-b2d2-58b11ce749bd
https://metaschool.so/course/how-does-ethereum-work-a-deepdive/lesson/cbf74f93-3534-4b4e-b2d2-58b11ce749bd

Transaction is a cryptographically signed piece of instruction that is generated by an externally owned account, serialized, and then submitted to the blockchain.

Gas is a unit of fuel that has cost.
Each transaction needs gas to be executed.
Gas is used to pay for computation and storage.
Gas limit is the maximum amount of gas that a transaction can use. It is set by the sender of the transaction.
Gas price is the amount of ether that the sender is willing to pay for each unit of gas. It is set by the sender of the transaction.
Nodes on the network will mention a minimum gas price that they are willing to accept for a transaction to be included in a block.

There are two types of transactions: message calls and contract creations (i.e. transactions that create new Ethereum contracts). 

All transactions contain the following components, regardless of their type:

nonce: a count of the number of transactions sent by the sender.
gasPrice: the number of Wei that the sender is willing to pay per unit of gas required to execute the transaction.
gasLimit: the maximum amount of gas that the sender is willing to pay for executing this transaction. This amount is set and paid upfront, before any computation is done.
to: the address of the recipient. In a contract-creating transaction, the contract account address does not yet exist, and so an empty value is used.
value: the amount of Wei to be transferred from the sender to the recipient. In a contract-creating transaction, this value serves as the starting balance within the newly created contract account.
v, r, s: used to generate the signature that identifies the sender of the transaction.
init (only exists for contract-creating transactions): An EVM code fragment that is used to initialize the new contract account. init is run only once, and then is discarded. When init is first run, it returns the body of the account code, which is the piece of code that is permanently associated with the contract account.
data (optional field that only exists for message calls): the input data (i.e. parameters) of the message call. For example, if a smart contract serves as a domain registration service, a call to that contract might expect input fields such as the domain and IP address.

A "seed" is calculated for each block. This seed is different for every "epoch," where each epoch is 30,000 blocks long. For the first epoch, the seed is the hash of a series of 32 bytes of zeros. For every subsequent epoch, it is the hash of the previous seed hash. Using this seed, a node can calculate a pseudo-random "cache."



